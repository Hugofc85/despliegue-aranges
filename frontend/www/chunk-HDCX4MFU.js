import{a as m}from"./chunk-CPF4Q2Z7.js";import{a as o,b as i}from"./chunk-B4WDAWNQ.js";import{a as h,f as d,h as g}from"./chunk-OM4WM6OA.js";import{a as n,f as l}from"./chunk-RW4GY4BD.js";var y=(()=>{let u=class u{constructor(r){this.loginService=r,this.usuariosSubject=new h([]),this.usuarios$=this.usuariosSubject.asObservable()}getAllUsuarios(){let r=`${i.url}usuarios`;return o.get({url:r,headers:{"Content-Type":"application/json"}}).then(t=>{if(t.status===404||t.status===401)throw{status:t.status,message:t.data.error};let a=t.data;return this.usuariosSubject.next(a),a}).catch(t=>{throw console.error("Error al obtener usuarios:",t),t})}getUsuarioById(r){let t=`${i.url}usuarios/${r}`;return o.get({url:t,headers:{"Content-Type":"application/json"}}).then(a=>{if(a.status===404||a.status===401)throw{status:a.status,message:a.data.error};return a.data}).catch(a=>{throw console.error("Error al obtener usuario:",a),a})}updateUsuarioSinPass(r,t){let a=`${i.url}usuarios/sin-password`;return o.put({url:a,headers:{"Content-Type":"application/json"},data:t}).then(s=>{if(s.status===404||s.status===401)throw{status:s.status,message:s.data.error};return this.actualizarUsuarioEnLista(r,s.data),console.log(s.data),s.data}).catch(s=>{throw console.error("Error al actualizar usuario sin contrase\xF1a:",s),s})}updateUsuarioConPass(r,t){let a=`${i.url}usuarios/con-password`;return o.put({url:a,headers:{"Content-Type":"application/json"},data:t}).then(s=>{if(s.status===404||s.status===401)throw{status:s.status,message:s.data.error};return this.actualizarUsuarioEnLista(r,s.data),s.data}).catch(s=>{throw console.error("Error al actualizar usuario con contrase\xF1a:",s),s})}actualizarUsuarioEnLista(r,t){let s=this.usuariosSubject.getValue().map(c=>c.id===r?n(n({},c),t):c);this.usuariosSubject.next(s)}deleteUsuario(r){let t=`${i.url}usuarios/${r}`;return o.delete({url:t,headers:{"Content-Type":"application/json"}}).then(a=>{if(a.status===404||a.status===401)throw{status:a.status,message:a.data.error};this.removerUsuarioDeLista(r)}).catch(a=>{throw console.error("Error al eliminar usuario:",a),a})}registerAndUpdateUsuarios(r){return l(this,null,function*(){try{let t=yield this.loginService.registro(r);return console.log("Usuario registrado:",t),yield this.getAllUsuarios(),t}catch(t){throw console.error("Error al registrar y actualizar usuarios:",t),t}})}removerUsuarioDeLista(r){let t=this.usuariosSubject.getValue().filter(a=>a.id!==r);this.usuariosSubject.next(t)}refrescarUsuarios(){return l(this,null,function*(){try{let r=yield this.getAllUsuarios();this.usuariosSubject.next(r)}catch(r){console.error("Error al refrescar usuarios:",r)}})}};u.\u0275fac=function(t){return new(t||u)(g(m))},u.\u0275prov=d({token:u,factory:u.\u0275fac,providedIn:"root"});let e=u;return e})();export{y as a};
